{
    // "parserOptions": {
    //     "ecmaVersion": 2019,
    //     "sourceType": "module"
    // },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": "./tsconfig.json",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "settings": {
        "react": {
            "version": "detect"
        }
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:unicorn/recommended",
        "prettier"
    ],
    "rules": {
        "eqeqeq": "error",
        "no-throw-literal": "error",
        "@typescript-eslint/no-unnecessary-condition": ["error"],
        // "@typescript-eslint/strict-boolean-expressions": ["warn", { "ignoreRhs": true }],
        // convered by TS
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-explicit-any": "off",
        // TODO: maybe we can keep the below for most files
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/member-delimiter-style": "off",
        "@typescript-eslint/no-empty-function": ["error", { "allow": ["arrowFunctions"] }],
        "@typescript-eslint/restrict-template-expressions": "off",
        "react/prop-types": "off",
        // TODO: restore this later because it'll help avoid index undefined ts errors
        "unicorn/no-for-loop": "off",
        "unicorn/prevent-abbreviations": "off",
        "unicorn/prefer-ternary": "warn",
        // we'll get there
        "unicorn/no-null": "warn",
        // not useless for destructuring
        "unicorn/no-useless-undefined": "off",
        "unicorn/filename-case": ["error", { "cases": { "camelCase": true, "pascalCase": true }}],
        "unicorn/no-nested-ternary": "off",
        // conflicts with prettier
        "unicorn/number-literal-case": "off",
        "unicorn/prefer-query-selector": "off"
    }
}
