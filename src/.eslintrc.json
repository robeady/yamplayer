{
    // "parserOptions": {
    //     "ecmaVersion": 2019,
    //     "sourceType": "module"
    // },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": "./tsconfig.json",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "settings": {
        "react": {
            "version": "detect"
        }
    },
    "extends": [
        "eslint:all",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/all",
        "plugin:react/all",
        "plugin:react-hooks/recommended",
        "plugin:unicorn/recommended",
        "plugin:jest/all",
        "prettier"
    ],
    "rules": {
        // the general idea here is to turn on as many things as practical,
        // but to set severity to 'warn' for issues that appear for incomplete code
        // then in the editor I run eslint in quiet mode to hide these
        // ideally there'd be a way to show these warnings after code is wrtitten but I haven't found one yet...
        //
        // === disabling non-recommended vanilla eslint rules ====
        // TODO: proper logging library should allow us to restore this
        "no-console": "off",
        "no-magic-numbers": "off",
        "id-length": "off",
        // doesn't understand TS
        "no-useless-constructor": "off",
        // ditto
        "no-invalid-this": "off",
        "max-lines": "off",
        "no-ternary": "off",
        "one-var": "off",
        "prefer-template": "off",
        "capitalized-comments": "off",
        "init-declarations": "off",
        "no-plusplus": "off",
        "sort-keys": "off",
        "no-warning-comments": "off",
        "sort-imports": "off",
        "no-use-before-define": "off",
        "no-else-return": "off",
        "no-bitwise": "off",
        "no-inline-comments": "off",
        "func-style": "off",
        "no-shadow": "off",
        "max-params": "off",
        "max-lines-per-function": "off",
        "multiline-comment-style": "off",
        "line-comment-position": "off",
        "lines-between-class-members": "off",
        "max-statements": "off",
        "no-undefined": "off",
        "max-classes-per-file": "off",
        "no-void": "off",
        "no-await-in-loop": "off",
        "consistent-return": "off",
        "default-case": "off",
        "class-methods-use-this": "warn",
        "no-continue": "off",
        "no-param-reassign": "off",
        "no-eq-null": "off",
        "eqeqeq": ["error", "always", { "null": "ignore" }],

        // === disabling ts rules ===
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-explicit-any": "off",
        // TODO: maybe we can keep the below for most files that don't handle any
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        // sometimes we need empty react callbacks
        "@typescript-eslint/no-empty-function": ["error", { "allow": ["arrowFunctions"] }],
        // passing numbers and similar into template expressions is fine
        "@typescript-eslint/restrict-template-expressions": "off",
        // too annoying for obvious return types and react components
        "@typescript-eslint/explicit-module-boundary-types": "off",

        // === disabling non-recommended ts rules ===
        // I want this but too much churn for now
        "@typescript-eslint/consistent-type-imports": "off",
        "@typescript-eslint/no-type-alias": "off",
        "@typescript-eslint/sort-type-union-intersection-members": "off",
        "@typescript-eslint/prefer-readonly-parameter-types": "off",
        "@typescript-eslint/explicit-member-accessibility": "off",
        "@typescript-eslint/no-magic-numbers": "off",
        "@typescript-eslint/prefer-readonly": "off",
        "@typescript-eslint/no-shadow": "off",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-confusing-void-expression": "off",
        "@typescript-eslint/lines-between-class-members": "off",
        "@typescript-eslint/naming-convention": "off",
        "@typescript-eslint/member-ordering": "off",
        "@typescript-eslint/no-implicit-any-catch": ["error", { "allowExplicitAny": true }],
        "@typescript-eslint/init-declarations": "off",
        "@typescript-eslint/strict-boolean-expressions": [
            "error",
            {
                "allowAny": true,
                "allowNullableBoolean": true,
                "allowString": true,
                "allowNullableString": true
            }
        ],
        "@typescript-eslint/no-unused-vars": [
            "warn",
            { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }
        ],
        "@typescript-eslint/no-dynamic-delete": "off",

        // === disabling react rules ===
        "react/prop-types": "off",

        // === disabling non-recommended react rules ===
        "react/no-multi-comp": "off",
        "react/jsx-no-literals": "off",
        "react/jsx-no-bind": "off",
        "react/forbid-component-props": "off",
        "react/jsx-sort-props": "off",
        "react/jsx-filename-extension": "off",
        "react/destructuring-assignment": "off",
        "react/require-default-props": "off",
        "react/jsx-max-depth": "off",
        "react/display-name": "off",

        "react-hooks/exhaustive-deps": "error",

        // === disabling unicorn rules ===
        // TODO: maybe restore this later because it'll help avoid index undefined ts errors
        // "unicorn/no-for-loop": "error",
        "unicorn/no-array-for-each": "off", // complains about my stream forEach
        "unicorn/no-array-callback-reference": "off", // forbids typescript type guard filter functions
        "unicorn/prevent-abbreviations": "off",
        "unicorn/prefer-ternary": "warn",
        // for now we use null because optional properties are easily forgotten
        "unicorn/no-null": "off",
        // not useless for array destructuring in TS
        "unicorn/no-useless-undefined": "off",
        "unicorn/filename-case": ["error", { "cases": { "camelCase": true, "pascalCase": true } }],
        "unicorn/no-nested-ternary": "off",
        // conflicts with prettier
        "unicorn/number-literal-case": "off",
        // we don't query the dom much and this dislikes the thing we do use to set up react, document.getElementById
        "unicorn/prefer-query-selector": "off",
        // not supported by TS? can't find any help online
        "unicorn/prefer-node-protocol": "off",
        "unicorn/prefer-module": "off",

        // === jest ===
        "jest/expect-expect": ["warn", { "assertFunctionNames": ["expect*"] }],
        "jest/prefer-expect-assertions": "off",
        "jest/prefer-strict-equal": "off",
        "jest/no-hooks": "off",
        "jest/require-top-level-describe": "off",
        "jest/consistent-test-it": ["error", { "withinDescribe": "test" }],
        "jest/unbound-method": "off" // dupe
    }
}
